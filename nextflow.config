/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ebi-metagenomics/mettannotator Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {
    
    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = ''
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

profiles {
    // debug {
    //    dumpHashes             = true
    //    process.beforeScript   = 'echo $HOSTNAME'
    //    cleanup                = false
    // }
 

    ebi {
        cleanup = true
        // params.workdir = "/hps/nobackup/rdf/metagenomics/research-team/santiago/softw/BGCdetection_pipeline/work"
        params.singularity_cachedir = "/hps/nobackup/rdf/metagenomics/service-team/singularity-cache/"
        params.min_lenght_contig = 3000

        // workDir = params.workdir

        includeConfig 'conf/ebi_codon.config'

        singularity {
            enabled = true
            autoMounts = true
            cacheDir = params.singularity_cachedir
        }

        process {
            cache = "lenient"
            errorStrategy = {
                task.exitStatus in ((130..145) + 104 + 247 + 250) && task.attempt <= 2 ? 'retry' : 'ignore'
                // task.exitStatus in ((130..145) + 104 + 247 + 250) && task.attempt <= 2 ? 'retry' : 'finish'
            }
        }
        
        executor {
            name = "slurm"
            queueSize = 200
            queueGlobalStatus = true
            submitRateLimit = "10 sec"
            pollInterval = "10 sec"
        }
    }
    
    debug { 
        cleanup = false
        params.singularity_cachedir = "/hps/nobackup/rdf/metagenomics/service-team/singularity-cache/"
        params.min_lenght_contig = 3000

        // workDir = params.workdir

        includeConfig 'conf/ebi_codon.config'

        singularity {
            enabled = true
            autoMounts = true
            cacheDir = params.singularity_cachedir
        }

        process {
            cache = "lenient"
            errorStrategy = {
                task.exitStatus in ((130..145) + 104 + 247 + 250) && task.attempt <= 2 ? 'retry' : 'ignore'
                // task.exitStatus in ((130..145) + 104 + 247 + 250) && task.attempt <= 2 ? 'retry' : 'finish'
            }
        }
        
        executor {
            name = "slurm"
            queueSize = 200
            queueGlobalStatus = true
            submitRateLimit = "10 sec"
            pollInterval = "10 sec"
        }
    }

}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation' // Validation of pipeline parameters and creation of an input channel from a assemblies sheet
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}


// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}